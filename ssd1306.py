
from machine import I2C
 
class SSD1306() :

    # ============================================================================
    # ===( Constants )============================================================
    # ============================================================================

    CTL_CMD                       = 0x80
    CTL_DAT                       = 0x40

    CMD_DISPLAYOFF                = 0xAE
    CMD_SETCONTRAST               = 0x81
    CMD_DISPLAYALLON_RESUME       = 0xA4
    CMD_DISPLAYALLON              = 0xA5
    CMD_NORMALDISPLAY             = 0xA6
    CMD_INVERTDISPLAY             = 0xA7
    CMD_DISPLAYON                 = 0xAF
    CMD_SETDISPLAYOFFSET          = 0xD3
    CMD_SETCOMPINS                = 0xDA
    CMD_SETVCOMDETECT             = 0xDB
    CMD_SETDISPLAYCLOCKDIV        = 0xD5
    CMD_SETPRECHARGE              = 0xD9
    CMD_SETMULTIPLEX              = 0xA8
    CMD_SETLOWCOLUMN              = 0x00
    CMD_SETHIGHCOLUMN             = 0x10
    CMD_SETSTARTLINE              = 0x40
    CMD_MEMORYMODE                = 0x20
    CMD_COLUMNADDR                = 0x21
    CMD_PAGEADDR                  = 0x22
    CMD_COMSCANINC                = 0xC0
    CMD_COMSCANDEC                = 0xC8
    CMD_SEGREMAP                  = 0xA0
    CMD_CHARGEPUMP                = 0x8D
    CMD_EXTERNALVCC               = 0x10
    CMD_SWITCHCAPVCC              = 0x20
    CMD_SETPAGEADDR               = 0xB0
    CMD_SETCOLADDR_LOW            = 0x00
    CMD_SETCOLADDR_HIGH           = 0x10
    CMD_ACTIVATE_SCROLL           = 0x2F
    CMD_DESACTIVATE_SCROLL        = 0x2E
    CMD_SET_VERTI_SCROLL_AREA     = 0xA3
    CMD_RIGHT_HORIZ_SCROLL        = 0x26
    CMD_LEFT_HORIZ_SCROLL         = 0x27
    CMD_VERTI_RIGHT_HORIZ_SCROLL  = 0x29
    CMD_VERTI_LEFT_HORIZ_SCROLL   = 0x2A

    FONT_8x8 = bytes([
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # 32= 
        0x00,0x00,0x00,0x4f,0x4f,0x00,0x00,0x00, # 33=!
        0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00, # 34="
        0x14,0x7f,0x7f,0x14,0x14,0x7f,0x7f,0x14, # 35= hash
        0x00,0x24,0x2e,0x6b,0x6b,0x3a,0x12,0x00, # 36=$
        0x00,0x63,0x33,0x18,0x0c,0x66,0x63,0x00, # 37=%
        0x00,0x32,0x7f,0x4d,0x4d,0x77,0x72,0x50, # 38=&
        0x00,0x00,0x00,0x04,0x06,0x03,0x01,0x00, # 39='
        0x00,0x00,0x1c,0x3e,0x63,0x41,0x00,0x00, # 40=(
        0x00,0x00,0x41,0x63,0x3e,0x1c,0x00,0x00, # 41=)
        0x08,0x2a,0x3e,0x1c,0x1c,0x3e,0x2a,0x08, # 42=*
        0x00,0x08,0x08,0x3e,0x3e,0x08,0x08,0x00, # 43=+
        0x00,0x00,0x80,0xe0,0x60,0x00,0x00,0x00, # 44=,
        0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00, # 45=-
        0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00, # 46=.
        0x00,0x40,0x60,0x30,0x18,0x0c,0x06,0x02, # 47=/
        0x00,0x3e,0x7f,0x49,0x45,0x7f,0x3e,0x00, # 48=0
        0x00,0x40,0x44,0x7f,0x7f,0x40,0x40,0x00, # 49=1
        0x00,0x62,0x73,0x51,0x49,0x4f,0x46,0x00, # 50=2
        0x00,0x22,0x63,0x49,0x49,0x7f,0x36,0x00, # 51=3
        0x00,0x18,0x18,0x14,0x16,0x7f,0x7f,0x10, # 52=4
        0x00,0x27,0x67,0x45,0x45,0x7d,0x39,0x00, # 53=5
        0x00,0x3e,0x7f,0x49,0x49,0x7b,0x32,0x00, # 54=6
        0x00,0x03,0x03,0x79,0x7d,0x07,0x03,0x00, # 55=7
        0x00,0x36,0x7f,0x49,0x49,0x7f,0x36,0x00, # 56=8
        0x00,0x26,0x6f,0x49,0x49,0x7f,0x3e,0x00, # 57=9
        0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00, # 58=:
        0x00,0x00,0x80,0xe4,0x64,0x00,0x00,0x00, # 59=;
        0x00,0x08,0x1c,0x36,0x63,0x41,0x41,0x00, # 60=<
        0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x00, # 61==
        0x00,0x41,0x41,0x63,0x36,0x1c,0x08,0x00, # 62=>
        0x00,0x02,0x03,0x51,0x59,0x0f,0x06,0x00, # 63=?
        0x00,0x3e,0x7f,0x41,0x4d,0x4f,0x2e,0x00, # 64=@
        0x00,0x7c,0x7e,0x0b,0x0b,0x7e,0x7c,0x00, # 65=A
        0x00,0x7f,0x7f,0x49,0x49,0x7f,0x36,0x00, # 66=B
        0x00,0x3e,0x7f,0x41,0x41,0x63,0x22,0x00, # 67=C
        0x00,0x7f,0x7f,0x41,0x63,0x3e,0x1c,0x00, # 68=D
        0x00,0x7f,0x7f,0x49,0x49,0x41,0x41,0x00, # 69=E
        0x00,0x7f,0x7f,0x09,0x09,0x01,0x01,0x00, # 70=F
        0x00,0x3e,0x7f,0x41,0x49,0x7b,0x3a,0x00, # 71=G
        0x00,0x7f,0x7f,0x08,0x08,0x7f,0x7f,0x00, # 72=H
        0x00,0x00,0x41,0x7f,0x7f,0x41,0x00,0x00, # 73=I
        0x00,0x20,0x60,0x41,0x7f,0x3f,0x01,0x00, # 74=J
        0x00,0x7f,0x7f,0x1c,0x36,0x63,0x41,0x00, # 75=K
        0x00,0x7f,0x7f,0x40,0x40,0x40,0x40,0x00, # 76=L
        0x00,0x7f,0x7f,0x06,0x0c,0x06,0x7f,0x7f, # 77=M
        0x00,0x7f,0x7f,0x0e,0x1c,0x7f,0x7f,0x00, # 78=N
        0x00,0x3e,0x7f,0x41,0x41,0x7f,0x3e,0x00, # 79=O
        0x00,0x7f,0x7f,0x09,0x09,0x0f,0x06,0x00, # 80=P
        0x00,0x1e,0x3f,0x21,0x61,0x7f,0x5e,0x00, # 81=Q
        0x00,0x7f,0x7f,0x19,0x39,0x6f,0x46,0x00, # 82=R
        0x00,0x26,0x6f,0x49,0x49,0x7b,0x32,0x00, # 83=S
        0x00,0x01,0x01,0x7f,0x7f,0x01,0x01,0x00, # 84=T
        0x00,0x3f,0x7f,0x40,0x40,0x7f,0x3f,0x00, # 85=U
        0x00,0x1f,0x3f,0x60,0x60,0x3f,0x1f,0x00, # 86=V
        0x00,0x7f,0x7f,0x30,0x18,0x30,0x7f,0x7f, # 87=W
        0x00,0x63,0x77,0x1c,0x1c,0x77,0x63,0x00, # 88=X
        0x00,0x07,0x0f,0x78,0x78,0x0f,0x07,0x00, # 89=Y
        0x00,0x61,0x71,0x59,0x4d,0x47,0x43,0x00, # 90=Z
        0x00,0x00,0x7f,0x7f,0x41,0x41,0x00,0x00, # 91=[
        0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0x40, # 92='\'
        0x00,0x00,0x41,0x41,0x7f,0x7f,0x00,0x00, # 93=]
        0x00,0x08,0x0c,0x06,0x06,0x0c,0x08,0x00, # 94=^
        0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0, # 95=_
        0x00,0x00,0x01,0x03,0x06,0x04,0x00,0x00, # 96=`
        0x00,0x20,0x74,0x54,0x54,0x7c,0x78,0x00, # 97=a
        0x00,0x7f,0x7f,0x44,0x44,0x7c,0x38,0x00, # 98=b
        0x00,0x38,0x7c,0x44,0x44,0x6c,0x28,0x00, # 99=c
        0x00,0x38,0x7c,0x44,0x44,0x7f,0x7f,0x00, # 100=d
        0x00,0x38,0x7c,0x54,0x54,0x5c,0x58,0x00, # 101=e
        0x00,0x08,0x7e,0x7f,0x09,0x03,0x02,0x00, # 102=f
        0x00,0x98,0xbc,0xa4,0xa4,0xfc,0x7c,0x00, # 103=g
        0x00,0x7f,0x7f,0x04,0x04,0x7c,0x78,0x00, # 104=h
        0x00,0x00,0x00,0x7d,0x7d,0x00,0x00,0x00, # 105=i
        0x00,0x40,0xc0,0x80,0x80,0xfd,0x7d,0x00, # 106=j
        0x00,0x7f,0x7f,0x30,0x38,0x6c,0x44,0x00, # 107=k
        0x00,0x00,0x41,0x7f,0x7f,0x40,0x00,0x00, # 108=l
        0x00,0x7c,0x7c,0x18,0x30,0x18,0x7c,0x7c, # 109=m
        0x00,0x7c,0x7c,0x04,0x04,0x7c,0x78,0x00, # 110=n
        0x00,0x38,0x7c,0x44,0x44,0x7c,0x38,0x00, # 111=o
        0x00,0xfc,0xfc,0x24,0x24,0x3c,0x18,0x00, # 112=p
        0x00,0x18,0x3c,0x24,0x24,0xfc,0xfc,0x00, # 113=q
        0x00,0x7c,0x7c,0x04,0x04,0x0c,0x08,0x00, # 114=r
        0x00,0x48,0x5c,0x54,0x54,0x74,0x20,0x00, # 115=s
        0x04,0x04,0x3f,0x7f,0x44,0x64,0x20,0x00, # 116=t
        0x00,0x3c,0x7c,0x40,0x40,0x7c,0x3c,0x00, # 117=u
        0x00,0x1c,0x3c,0x60,0x60,0x3c,0x1c,0x00, # 118=v
        0x00,0x1c,0x7c,0x30,0x18,0x30,0x7c,0x1c, # 119=w
        0x00,0x44,0x6c,0x38,0x38,0x6c,0x44,0x00, # 120=x
        0x00,0x9c,0xbc,0xa0,0xa0,0xfc,0x7c,0x00, # 121=y
        0x00,0x44,0x64,0x74,0x5c,0x4c,0x44,0x00, # 122=z
        0x00,0x08,0x08,0x3e,0x77,0x41,0x41,0x00, # 123={
        0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00, # 124=|
        0x00,0x41,0x41,0x77,0x3e,0x08,0x08,0x00, # 125=}
        0x00,0x02,0x03,0x01,0x03,0x02,0x03,0x01, # 126=~
        0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55  # 127
    ])

    # ============================================================================
    # ===( Constructor )==========================================================
    # ============================================================================

    def __init__( self,
                  i2cSDAPinNum,
                  i2cSCLPinNum,
                  external_vcc  = True,
                  i2cDeviceAddr = 0x3c ) :

        self.external_vcc   = external_vcc
        self.height         = 64
        self.pages          = int(self.height / 8)
        self.columns        = 128
        self.i2cDeviceAddr  = i2cDeviceAddr
        self.cmdBuffer      = bytearray(2)
        self.cmdBuffer[0]   = SSD1306.CTL_CMD
        self.screenBuffer   = bytearray(1 + self.pages * self.columns)
        self.i2c            = I2C(0)

        pins                = ( "P" + str(i2cSDAPinNum),
                                "P" + str(i2cSCLPinNum) )

        self.i2c.init( mode     = I2C.MASTER,
                       baudrate = 400000, # 400kHz
                       pins     = pins )

        self._initScreen()

    # ============================================================================
    # ===( Utils )================================================================
    # ============================================================================

    def _sendI2CCommand(self, command_byte) :
        self.cmdBuffer[1] = command_byte
        self.i2c.writeto(self.i2cDeviceAddr, self.cmdBuffer)

    # ----------------------------------------------------------------------------

    def _sendI2CScreenBuffer(self) :
        self._sendI2CCommand(SSD1306.CMD_COLUMNADDR)
        self._sendI2CCommand(0)
        self._sendI2CCommand(self.columns - 1)
        self._sendI2CCommand(SSD1306.CMD_PAGEADDR)
        self._sendI2CCommand(0)
        self._sendI2CCommand(self.pages - 1)
        self.i2c.writeto(self.i2cDeviceAddr, self.screenBuffer)

    # ----------------------------------------------------------------------------

    def _initScreen(self) :
        chargepump = 0x10 if self.external_vcc else 0x14
        precharge  = 0x22 if self.external_vcc else 0xf1
        multiplex  = 0x1f if self.height == 32 else 0x3f
        compins    = 0x02 if self.height == 32 else 0x12
        contrast   = 0xff # 0x8f if self.height == 32 else (0x9f if self.external_vcc else 0x9f)
        data = [ SSD1306.CMD_DISPLAYOFF,
                 SSD1306.CMD_SETDISPLAYCLOCKDIV,  0x80,
                 SSD1306.CMD_SETMULTIPLEX,        multiplex,
                 SSD1306.CMD_SETDISPLAYOFFSET,    0x00,
                 SSD1306.CMD_SETSTARTLINE | 0x00,
                 SSD1306.CMD_CHARGEPUMP,          chargepump,
                 SSD1306.CMD_MEMORYMODE,		  0x00,
                 SSD1306.CMD_SEGREMAP 	  | 0x10,
                 SSD1306.CMD_COMSCANDEC,
                 SSD1306.CMD_SETCOMPINS,          compins,
                 SSD1306.CMD_SETCONTRAST,         contrast,
                 SSD1306.CMD_SETPRECHARGE,        precharge,
                 SSD1306.CMD_SETVCOMDETECT,       0x40,
                 SSD1306.CMD_DISPLAYALLON_RESUME,
                 SSD1306.CMD_NORMALDISPLAY,
                 SSD1306.CMD_DISPLAYON ]
        for item in data :
            self._sendI2CCommand(item)
        self._emptyScreen()

    # ----------------------------------------------------------------------------

    def _emptyScreen(self, refresh=True) :
        for i in range(len(self.screenBuffer)) :
            self.screenBuffer[i] = 0
        self.screenBuffer[0] = SSD1306.CTL_DAT
        if refresh :
            self._sendI2CScreenBuffer()

    # ----------------------------------------------------------------------------

    def _setScreenPixel(self, x, y, show=True, refresh=False) :
        if x >= 0 and y >= 0 :
            x = 127 - x
            y = 63  - y
            if x >= 0 and y >= 0 :
                index = x + (int(y / 8) * self.columns)
                if show :
                    self.screenBuffer[1 + index] |= (1 << (y & 7))
                else :
                    self.screenBuffer[1 + index] &= ~(1 << (y & 7))
                if refresh :
                    self._sendI2CScreenBuffer()

    # ----------------------------------------------------------------------------

    def _setScreenBytes(self, x, y, bArray, refresh=False) :
        x = 127 - x
        y = 63  - y
        index = x + (int(y / 8) * self.columns)
        for i in range(len(bArray)) :
            self.screenBuffer[1 + index-i] = bArray[i]
        if refresh :
            self._sendI2CScreenBuffer()

    # ----------------------------------------------------------------------------

    def _flipFontChar(self, fontChar) :
        n = len(fontChar)
        b = bytearray(n)
        for i in range(n) :
            b[i] = fontChar[n-1-i]
        return b

    # ----------------------------------------------------------------------------

    def _charToFontChar(self, char, flip=False) :
        i = (ord(char) - ord(' ')) * 8
        b = SSD1306.FONT_8x8[i:i+8]
        return self._flipFontChar(b) if flip else b

    # ----------------------------------------------------------------------------

    def _stringToFontChars(self, s, flip=False) :
        b  = bytearray(8 * len(s))
        for i in range(len(s)) :
            cb = self._charToFontChar(s[i], flip)
            for j in range(8) :
                b[i * 8 + j] = cb[j]
        return b

    # ============================================================================
    # ===( Functions )============================================================
    # ============================================================================

    def ScreenPowerOn(self) :
        self._sendI2CCommand(SSD1306.CMD_DISPLAYON)

    # ----------------------------------------------------------------------------

    def ScreenPowerOff(self) :
        self._sendI2CCommand(SSD1306.CMD_DISPLAYOFF)

    # ----------------------------------------------------------------------------

    def SetScreenContrast(self, contrast) :
        self._sendI2CCommand(SSD1306.CMD_SETCONTRAST)
        self._sendI2CCommand(contrast)

    # ----------------------------------------------------------------------------

    def ClearScreen(self, refresh=True) :
        self._emptyScreen(refresh)

    # ----------------------------------------------------------------------------

    def RefreshScreen(self) :
        self._sendI2CScreenBuffer()

    # ----------------------------------------------------------------------------

    def SetScreenOrientationA(self) :
        self._sendI2CCommand(SSD1306.CMD_NORMALDISPLAY)

    # ----------------------------------------------------------------------------

    def SetScreenOrientationB(self) :
        self._sendI2CCommand(SSD1306.CMD_INVERTDISPLAY)

    # ----------------------------------------------------------------------------

    def ShowScreenPixel(self, x, y, refresh=True) :
        self._setScreenPixel(x, y, True, refresh)

    # ----------------------------------------------------------------------------

    def HideScreenPixel(self, x, y, refresh=True) :
        self._setScreenPixel(x, y, False, refresh)

    # ----------------------------------------------------------------------------

    def DrawScreenText(self, s, x, y, flip=False, refresh=True) :
        self._setScreenBytes(x, y, self._stringToFontChars(s, flip), refresh)

    # ============================================================================
    # ============================================================================
    # ============================================================================
